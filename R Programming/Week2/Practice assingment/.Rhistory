evaluate(function(x){x=1}, x<-c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[2]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
}
paste("hey")
}
}
}
simon_says <- function(...){
#   paste("Simon says:", ...)
# }
simon_says
simon_says <- function(...){
paste("Simon says:", ...)
}
simon_says
p <- paste("START", ..., ..., "STOP")
p
p <- paste("START", "STOP", ..., ...,)
telegram(test)
paste("START", "STOP", ..., ...,)
}
}
}
p
}
telegram <- function(...){
p<-paste("START", "STOP", ..., ...)
}
paste("START", "STOP", ..., ...)
paste(..., "START", "STOP")
}
}
paste("START", "STOP")}
paste("Simon says:", ...)
}
paste("Simon says:", ...)}
}
simon_says <- function(...)
}
# }
}
beta  <- args[["beta"]]
}
add_alpha_and_beta <- function(...){
args <- list(...)
alpha <- args[["alpha"]]
beta  <- args[["beta"]]
}
add_alpha_and_beta <- function(...){
args <- list(...)
alpha <- args[["alpha"]]
beta  <- args[["beta"]]
}
alpha + beta
}
p<- alpha + beta
}
}
args <- list(...)
alpha <- args[["alpha"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
?unclass
?strptime
lubridate package by Hadley Wickham
install.packages(lubridate)
list()
list
source('~/.active-rstudio-document')
x
rnorm(2 * 2 * 10)
a<-rnorm(2 * 2 * 10)
a<-rnorm(2 * 2 * 10)
a <- rnorm(2 * 2 * 10)
a
class(a)
?rnorm()
a
class(a)
str(a)
b
apply(a, c(1,2, mean))
apply(a, c(1,2), mean))
b
source('~/.active-rstudio-document')
iris
clas(iris)
class(iris)
unclass(iris)
names(iris)
cool <- names(iris)
cool
class(cool)
rownames(iris3)
iris3
class(iris3)
rownames(iris)
i <- iris
i
iris_names <- names(iris)
names(i)[c1:2,4] <- c("A", "B", "C")
i
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
names(i)[c(1:2,4)] <- c("A", "B", "C")
names(i)[c1:2,4] <
i
source('~/.active-rstudio-document')
i
i <- iris
names(i)[1] #<- c("A", "B", "C")
names(i)[1:4] #<- c("A", "B", "C")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
iris
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
iris
iris[3,]
iris[2:5,]
iris[,2]
iris[,1] >5
iris&1 >5
iris&sepal.length >5
iris&"sepal.length" >5
iris&"sepal.length" >5
iris[iris > 5]
iris[iris > 5] <- 0
iris[iris > 5] <- 99
iris[iris > 5] <- 99
iris[iris > 5] <- 99
source('~/.active-rstudio-document')
iris[iris > 5] <- 99
datafram(columnnames(a,b), 1:6)
datafram(columnnames(a,b), 1:6)
datafram(column=c("a","b"), 1:6)
datafram(columname=c("a","b"), 1:6)
datafram(columnames=c("a","b"), 1:6)
datafram(1:6)
co <- datafram(1:6)
co <- datafram(1:6)
co <- datafram(1:6)
co <- dataframe(1:6)
source('~/.active-rstudio-document')
co <- matrix(1:6)
co <- matrix(1:6)
source('~/.active-rstudio-document')
co <- matrix(1:6)
co
co <- dataframe(1:6)
co
source('~/.active-rstudio-document')
co <- frame(1:6)
source('~/.active-rstudio-document')
co
source('~/.active-rstudio-document')
co
source('~/.active-rstudio-document')
co <- data.frame(1:6, "x")
co
co <- data.frame(1:6)
co <- data.frame(1:6)
co
co <- data.fram(2,2)
source('~/.active-rstudio-document')
co <- data.frame(2,2)
co
?data.frame
x <- factor(c("yes", "yes", "no", "yes", "no"))
source('~/.active-rstudio-document')
x <
x
x
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes","no"))
source('~/.active-rstudio-document')
x
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x <- c(1:4, NA, 7:10)
x
is.na(x)
source('~/.active-rstudio-document')
is.NAN(x)
is.NaN(x)
is.NaN(x)
source('~/.active-rstudio-document')
is.NaN(x)
source('~/.active-rstudio-document')
is.nan(x)
class(x)
as.number(x)
as.numeric(x)
class(x)
source('~/.active-rstudio-document')
x <- c(1:4, NA, NaN, 7:10)
class(x)
is.na(x)
is.nan(x)
source('~/.active-rstudio-document')
x
nrow(3)
nrow(x)
install.packages(c("DBI", "evaluate", "Matrix", "rmarkdown"))
install.packages("Matrix")
source('~/Coursera/R/t.R')
cube <- make.power(3)
cube
cube(1)
square <- make.power(2)
square(1)
cube
square
make.power
cube
source('~/Coursera/R/t.R')
x * n
source('~/Coursera/R/t.R')
make.power <- function(n) {
pow <- function(x) {
x * n
}
pow
}
make.power <- function(n) {
pow <- function(x) {
x * n
}
pow
}
make.power()
cube <- make.power(3)
cube
n
cube(3)
ls(environment(cube))
get("n", environment(square))
y <- 10
source('~/Coursera/R/t.R')
f(10)
environment(g)
g(2)
source('~/Coursera/R/t.R')
g(2)
y <- 3
g(2)
source('~/Coursera/R/t.R')
source('~/Coursera/R/t.R')
g(2)
make.NegLogLik <- function(data, fixed = c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5 * length(data) * log(2 * pi * sigma * 2)
b <- -
}
}
source('~/Coursera/R/t.R')
set.seed(1)
normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLik(normals)
nLL
normals
nLL
nLL()
nLL(1)
source('~/Coursera/R/t.R')
function(p)
ls(environment(nLL))
optim(c(my = 0, sigma = 1), nLL)&par
optim(c(mu = 0, sigma = 1), nLL)&par
optim(c(mu = 0, sigma = 1), nLL)$par
nLL <- make.NegLogLik(normals, c(FALSE), 2)
nLL <- make.NegLogLik(normals, c(FALSE, 2))
optimize(nLL, c(-1, 3))$minimum
nLL <- make.NegLogLik(normals, c(1, FALSE))
optimize(nLL, c(le-6, 10))$minimum
optimize(nLL, c(1e-6, 10))$minimum
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "1")
plot(x, exp(-(y - min(y))), type = "1")
plot(x, exp(-(y - min(y))), type = "2")
plot(x, exp(-(y - min(y))), type = "1")
plot.xy(x, exp(-(y - min(y))), type = "1")
plot(x, exp(-(y - min(y))), type = "1")
source('~/Coursera/R/t.R')
ch(R coding, pollen)
ch("R coding", "pollen")
d
p
ch
ch()
source('~/Coursera/R/t.R')
ch("R coding", "pollen")
environment(ch)
setwd("~/Me/Coursera/R/Assaigment Week 2/Practice assingment")
source('~/Coursera/R/t.R')
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
source('~/Coursera/R/t.R')
source('~/Coursera/R/t.R')
list.files("diet_data")
andy <- read.csv("John.csv")
andy <- read.csv("diet_data"/John.csv")
andy <- read.csv("diet_data"/John.csv")
head(andy$day)
andy <- read.csv("diet_data"/John.csv)
head(andy$day)
andy <- read.csv("diet_data/John.csv")
head(andy$day)
andy
head(andy$day)
source('~/Coursera/R/t.R')
andy <- read.csv("diet_data/John.csv")
head(andy$day)
head(andy$day)
andy <- read.csv("diet_data/John.csv")
head(andy)
lenght(andy$Weight)
length(andy$Weight)
dim(andy)
length(andy$Weight) #Determining how many rows the files has.
dim(andy)
str(andy)
summary(andy)
names(andy)
head(andy)
tail(andy)
andy
class(andy)
andy[1, "weight"]
john[1,weight]
andy[1, "weight"]
andy
andy[1, "weight"]
andy[1, "weight"]
andy[1, "Weight"]
andy[1, "Weight"]
andy[5:10, "Weight"]
which
andy[which(andy$Day == 30, "Weight")]
andy[which(andy$Day == 30), "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy[which(andy[, "Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day == 30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
?list
files <- list.files("diet_data")
files
files[3]
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names = TRUE)
files_full
head(read.csv(files_full[3]))
list("diet_data")
list(diet_data)
list.files("diet_data")
andy_david <- rbind(andy, read.csv(files_full[2]))
andy_david
class(andy_david)
andy_david <- rbind(andy, read.csv(files_full[2]))
day_25 <- andy_david[which(andy_david$Day == 25)] #Subsets the instnaces or rows according to the lofical operator
day_25
andy_david
day_25 <- andy_david[which(andy_david$Day == 25)] #Subsets the instnaces or rows according to the lofical operator
day_25
andy_david
day_25 <- andy_david[which(andy_david$Day == 25), ] #Subsets the instnaces or rows according to the lofical operator
day_25
for (i in 1:5) {
data <- rbind(dat, read.csv(files_full[i]))
}
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
source('~/Coursera/R/t.R')
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
environment(dat)
dat <- data.frame() #Creates the data fram otherwise, the R will throug an error
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame() #Creates the data fram otherwise, the R will throug an error
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat
median(data$Weight)
median(dat$Weight)
median(dat$Weight, na.rm = TRUE) # Gets the median wile stripts the data from NA values.
median(dat$Weight, na.rm = TRUE)
dat_30 <- data[which(dat, "Day") == 30, ]
dat_30
median(dat_30$Weight)
dat_30 <- dat[which(dat, "Day") == 30, ]
dat_30
median(dat_30$Weight)
median(dat$Weight, na.rm = TRUE) # Gets the median wile stripts the data from NA values.
dat_30 <- dat[which(dat, "Day") == 30, ]
dat_30
median(dat_30$Weight)
dat_30 <- dat[which(dat, "Day") == 30, ]
dat_30 <- dat[which(dat[, "Day") == 30), ]
dat_30
median(dat_30$Weight)
dat_30 <- dat[which(dat[, "Day" == 30), ]
dat_30
median(dat_30$Weight)
dat_30 <- dat[which(dat[, "Day" == 30), ]
dat_30
median(dat_30$Weight)
source('~/Coursera/R/t.R')
dat_30
dat
dat_30
dat_30 <- dat[which(dat[, "Day" == 30), ]
dat_30 <- dat[which(dat[, "Day"] == 30),
dat_30
median(dat_30$Weight)
dat_30 <- dat[which(dat[, "Day"] == 30), ]
dat_30
median(dat_30$Weight)
dat_30
dat_30 <- dat[which(dat[, "Day"] == 30), ]
dat_30
median(dat_30$Weight)
weightmedian <- function("directory, day") {
}
getwd()
ls
list()
setwd("~/Me/Coursera/R/Assaigment Week 2/Practice assingment/diet_data")
getwd()
files_list <- list.files(diet_data)
files_list <- list.files("diet_data")
files_list
files_list <- list.files("diet_data", full.names = TRUE)
files_list
files_list <- list.files("diet_data", full.names = TRUE)
files_list
files_list
getwd()
files_list <- list.files("diet_data", full.names = TRUE)
files_list <- list.files("diet_data", full.names = TRUE)
files_list
list.files("diet_data") #Lists the files
list.files("diet_data") #Lists the files
setwd("~/Me/Coursera/R/Assaigment Week 2/Practice assingment")
list.files("diet_data") #Lists the files
files_list <- list.files("diet_data", full.names = TRUE)
files_list
files_list
dat <- data.frame()
dat
for (i in 1:5) {  # loops through the files binding them to one dataset
dat <- rbind(dat, read.csv(files_list[i]))
}
dat
head(dat)
dat_subset <- dat[which(dat[, "day"] == day), ]
dat_subset <- dat[which(dat[, "Day"] == day), ]
weightmedian <- function(directory, day) {  #Fuction that return the median on a given day of a data in an specific directory
files_list <- list.files("diet_data", full.names = TRUE) #Passes all the files into a list.
dat <- data.frame()  #Creates an empty dataframe.
for (i in 1:5) {  # loops through the files binding them to one dataset
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day), ]
}
source('~/Coursera/R/t.R')
weightmedian <- function(directory, day) {  #Fuction that return the median on a given day of a data in an specific directory
files_list <- list.files("diet_data", full.names = TRUE) #Passes all the files into a list.
dat <- data.frame()  #Creates an empty dataframe.
for (i in 1:5) {  # loops through the files binding them to one dataset
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day), ]
}
dat_subset <- dat[which(dat[, "Day"] == day), ]
median(dat_subset[, "Weight"], na.rm = TRUE)
weightmedian <- function(directory, day) {  #Fuction that return the median on a given day of a data in an specific directory
files_list <- list.files("diet_data", full.names = TRUE) #Passes all the files into a list.
dat <- data.frame()  #Creates an empty dataframe.
for (i in 1:5) {  # loops through the files binding them to one dataset
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day), ]
median(dat_subset[, "Weight"], na.rm = TRUE)
}
weightmedian("diet_data", 4)
weightmedian(directory = "diet_data", day =  10)
x <- list(a = 1:5, b = rnorm)
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5)
x
x
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
x
