a <- apply(iris[, 1:4], 2, mean)
a
class(a)
a <- apply(iris, 1, mean)
library(datasets)
data
data("mtcars")
data(mtcars)
mtcars
?mtcars
m <- mtcars
m
head(m)
s <- split(m, m$cyl)
s
s
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
s
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mean
?tapply
class(s)
mean <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean
mean <- apply(mtcars, 2, mean)
mean
mean <- lapply(mtcars, mean)
mean
mean <- with(mtcars, tapply(mpg, cyl, mean))
mean
mean <- split(mtcars, mtcars$cyl)
mean
mean <- mean(mtcars$mpg, mtcars$cyl)
mean <- sapply(mtcars, cyl, mean)
mean <- tapply(mtcars$mpg, mtcars$cyl, mean)
mean
head(m)
source('~/.active-rstudio-document')
mean
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
82.63636 - 209.2143
debug(ls)
is()
ls()
?cat
install.packages(c("DBI", "formatR", "highr", "jsonlite", "knitr", "nlme"))
?ls
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
cube)()
source('~/.active-rstudio-document')
cube(3)
source('~/.active-rstudio-document')
class
class(x)
source('~/.active-rstudio-document')
z <- 10
f(3)
source('~/.active-rstudio-document')
y
source('~/Coursera/CourseraDSS/R/Week2/Vectos examples.R')
a <- 1:10
b <- 11:15
c <-  numeric()
vectors <- list(a = a, b = b, c = c)
# Result vector.
results <- numeric()
# Initialization of start and end vectors.
start <- end <- 0
# Vectors whithin a loop.
for (index in seq_along(vectors)) {
values <- vectors[[index]]
return(values)
}
for (index in seq_along(vectors)) {
values <- vectors[[index]]
return(values)
}
values
for (index in seq_along(vectors)) {
values <- vectors[[index]]
values
}
values
values
}
for (index in seq_along(vectors)) {
values <- vectors[[index]]
values
}
values
}
for (index in seq_along(vectors)) {
values <- vectors[[index]]
values
}
for (index in seq_along(vectors)) {
values <- vectors[[index]]
values
}
results <- numeric()
results <- numeric()
results <- numeric()
source('~/Coursera/CourseraDSS/R/Week2/Vectos examples.R')
for (index in seq_along(vectors)) {
values <- vectors[[index]]
values
}
source('~/.active-rstudio-document')
values
vectors
source('~/.active-rstudio-document')
vectors
values
source('~/.active-rstudio-document')
values
traceback(values)
source('~/.active-rstudio-document')
size
source('~/.active-rstudio-document')
results
debug(for)
source('~/.active-rstudio-document')
results
source('~/.active-rstudio-document')
results
frames <- list(data.frame(a = 1:10, b =21:30), data.frame(a = 11:15, b = 31:35))
class
class(frames)
str(frames)
frames
source('~/.active-rstudio-document')
debugSource('~/Desktop/Untitled.R')
debugSource('~/Desktop/Untitled.R')
View(values)
debugSource('~/Desktop/Untitled.R')
}
source('~/Desktop/Untitled.R')
}
for (index in seq_along(frames)) {
values <- frames[[index]]
size.a <- length(values$a)
source('~/Desktop/Untitled.R')
size.a <- length(values$a)
# Sample data.
frames <- list(data.frame(a = 1:10, b = 21:30), data.frame(a = 11:15, b = 31:35))
# Results vector.
results <- list(a = numeric(), b = numeric())
# Initialize start and end indices.
start.a <- start.b <- end.a <- end.b <- 0
## Loop
for (index in seq_along(frames)) {
values <- frames[[index]]
size.a <- length(values$a)
size.b <- length(values$b)
}
debugSource('~/Desktop/Untitled.R')
dnorm
dnorm(x, mean = 0, sd = 1 log = FALSE)
x <- rnorm(10)
x
x <- rnorm(10, 20, 2)
x
summary(x)
pnorm(2)
pnorm(1)
set.seed(1)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
set.seed(20)
x <- rnorm(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
y <- 0.5 + 2 * x + e
set.seed(20)
set.seed(10)
x <- rbinom(100, 1, 0.5)
str(x)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
plot(x, y)
source('~/.active-rstudio-document')
install.packages("rJava")
install.packages("rJava")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
source('~/.active-rstudio-document')
?xmlRoot
rootNode <- xmlRoot(doc)
rootnode
rootNode
rootNode <- xmlRoot(doc)
xmlRoot
source('~/.active-rstudio-document')
xmlRoot
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode
head(rootNode)
rootNode[[1]]
rootNode[[1][1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
x <- xpathSApply(rootNode, "//name", xmlValue)
class(x)
x <- xpathSApply(rootNode, "//price", xmlValue)
x
source('~/.active-rstudio-document')
scores
teams <- xpathSApply(doc, "//li[@class = 'team-name']", xmlValue)
teams
scores <- xpathSApply(doc, "//li[@class = 'score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class = 'team-name']", xmlValue)
scores
teams
scores
doc
scores <- xpathSApply(doc, "//li[@class = 'score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class = 'team-name']", xmlValue)
scores
teams
library(jsonlite)
source('~/.active-rstudio-document')
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
jsonData$owner$id
library(iris)
iris
class(iris)
install.packages("themes")
install.packages("theme")
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
install.packages("data.table")
library(data.table)
rnorm(9)
source('~/.active-rstudio-document')
head(DF, 3)
View(iris2)
View(DF)
source('~/.active-rstudio-document')
View(DF)
table()
tables()
tables()
class(DF)
?tables
DT[2,]
dt[DT$y = "a"]
DF[2,]
DF[DF$y = "a"]
DF[2,]
DF[DF$y = "a",]
source('~/.active-rstudio-document')
DF[2,]
DF[DF$y = "a",]
source('~/.active-rstudio-document')
DF[DF$y = "a",]
df
DF
DF[DF$y = "a",]
source('~/.active-rstudio-document')
DF[DF$y == "a",]
?==
DF[c(1,3)]
DF
DF[, w: = z * 2]
DF[, w: = z * 2]
DF[, w: == z * 2]
DF[, w: = z * 2]
DF[, w = z * 2]
DF[, w: = z * 2]
DF[, w:  z * 2]
DF[, w: = z * 2]
DF = data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
DF[, w: = z * 2]
class(DF)
DF[, w: = z * 2]
DF[, w: = (z * 2)]
DF[, w:=z * 2]
DF
DF[, h := z * 2]
DF
dt2 <- DF
dt2
DF[, y := 2]
DF
df2
dt2
DF
DF[, m := {tmp <- (x + z); log2(tmp + 5)}]
DF
DF
df
DF
DF[, b := mean(x + w), by = a]
DF[, b := mean(x + w), by = 2]
df
DF
DF[, w := x > 0]
DF
DF[, b := mean(x + w), by = 2]
DF[, a := h > 0]
DF
DF[, b := mean(z + h), by = a]
DF
set.seed(123)
DT <- data.table(x = sample(letters[1:3], 1E5), TRUE)
DT <- data.table(x = sample(letters[1:3], 1E5, TRUE))
DT
DT[, .N, by = x]
library(swirl)
swirl()
bye()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
dir.create(Quiz)
dir.create("Quiz")
bye()
dir.create("Quiz")
setwd("~/Coursera/CourseraDSS/Getting and Cleaning Data/Week 1")
dir.create("Quiz")
path <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
path
download.file(path, destfile = "./Quiz", method = "curl")
download.csv(path, destfile = "./Quiz/survey.csv", method = "curl")
download.file(path, destfile = "./Quiz/survey.csv", method = "curl")
str(read.csv("survey.csv"))
str(read.csv(survey.csv))
read.csv(survey.csv)
setwd("~/Coursera/CourseraDSS/Getting and Cleaning Data/Week 1/Quiz")
read.csv(survey.csv)
read.csv("survey.csv")
str(read.csv("survey.csv"))
head(read.csv("survey.csv"))
survey <- read.csv("survey.csv")
class
class(survey)
value <- survey[, survey$VAL >= 100000]
value <- survey[, survey$VAL]
value <- survey[, survey$VAL]
value <- survey[, survey$VAL]
head(survey)
value <- survey[, survey$VAL]
head(survey)
str(survey)
str(survey)
value
value <- survey[1,1]
value
value <- survey[1,survey$VAL]
value <- survey[1, survey[survey$VAL]]
value <- survey[1, survey[survey$VAL]]
str(survey)
value <- survey[1,survey$RT]
value <- survey[ ,survey$RT]
value
class(value)
value <- survey[ ,survey$RT]
value <- survey[ ,survey$VAL]
View(value)
View(survey)
View(survey)
value <- survey[ ,survey$SERIALNO]
value <- survey[ , [1]]
value <- survey[[vla]]
value <- survey[[14]]
value
value <- survey[ ,survey$SERIALNO]
value <- survey[ ,survey$RT]
value <- survey[ ,survey$DIVISION]
value <- survey[ ,survey$SERIALNO]
value <- survey[ ,survey$SERIALN0]
value <- survey[ ,survey$VAL]
value <- survey[ ,survey$VAL]
value <- survey[ ,survey$val]
value
value <- survey[ ,survey$VAL]
value <- survey[ ,survey[,survey$VAL]
value <- survey[ ,survey[survey$VAL]
value <- survey[survey["VAL"]]
value <- survey[["VAL"]]
value
data <- complete.cases(value)
data
total <- sum(value >= 1000000)
total
total <- count(value >= 1000000)
total <- count(data >= 1000000)
data
data <- rm.NA(value)
value <- rm.NA(survey[["VAL"]])
total <- count(data >= 1000000)
total <- count(data >= 1000000)
nrow(q1[which(q1$VAL == 24),])
nrow(q1[which(survey$VAL == 24),])
nrow(survey[which(survey$VAL == 24),])
library(xlsx)
file <- read.xlsx("get.xlsx")
file <- read.xlsx("get.xlsx", sheetName = 1)
head(fiele)
head(file)
str(file)
class(file)
head(file)
coli <- 1:15
rowi <- 18:23
dat <- read.xlsx("./Quiz/get.xlsx")
dat <- read.xlsx("./Quiz/get.xlsx", sheetIndex = 1, colIndex = 1:15, rowIndex = 18:23)
getwd()
setwd("~/Coursera/CourseraDSS/Getting and Cleaning Data/Week 1")
dat <- read.xlsx("./Quiz/get.xlsx", sheetIndex = 1, colIndex = 1:15, rowIndex = 18:23)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
path <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
page <- xmlTreeParse(path, useInternal = TRUE)
page <- xmlTreeParse(path, useInternal = TRUE)
path
page <- xmlTreeParse(path, useInternal = TRUE)
library(XML)
page <- xmlTreeParse(path, useInternal = TRUE)
download.file(path, destfile = "q4", method = "curl")
file <- download.file(path, destfile = "q4", method = "curl")
file
page <- xmlTreeParse("./q4", useInternal = TRUE)
page
rootNode <- xmlRoot(file)
rootNode <- xmlRoot(page)
rootNode
names(rootNode)
rootNode
xmlName(rootNode)
xpathApply(rootNode, "//name", xmlValue)
xpathApply(rootNode, "//zipcode", xmlValue)
count(xpathApply(rootNode, "//zipcode", xmlValue))
xpathApply(rootNode, "//zipcode", xmlValue)
zips <- xpathApply(rootNode, "//zipcode", xmlValue)
zips
zip <- as.vector(zips)
zip
class(zip)
zips <- as.vecto(xpathApply(rootNode, "//zipcode", xmlValue))
zips <- as.vector(xpathApply(rootNode, "//zipcode", xmlValue))
zips
sum(xpathApply(rootNode, "//zipcode" == 21231, xmlValue))
zip
zips <- xpathsApply(rootNode, "//zipcode", xmlValue)
zips <- xpathsApply(rootNode, "//zipcode", xmlValue)
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
zips
?count
class(zips)
data <- zips[wich([21231])]
data <- zips[wich(["21231"])]
data <- zips[wich("21231")]
data <- zips[zips == 21231]
data
count(data)
path <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
?fread
file <- download.file(path, destfile = "./Quiz/file.csv")
?fread
file
file <- download.file(path, destfile = "./Quiz/file.csv", method = "curl")
file
path
file <-fread("./file.csv")
getwd()
file <-fread("./Quiz/file.csv")
file
DT <-fread("./Quiz/file.csv")
dt
DT
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans((DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]))
system.time(rowMeans((DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]))
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
sum(dat$Zip*dat$Ext,na.rm=T)
